---
# Source: postgresql/templates/networkpolicy.yaml
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-15.3.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: patroni
    cluster-name: release-name-postgresql
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
  ingress:
    # Allow inbound connections
    - ports:
      - port: 5432
      - port: 9187
      
      from:
        - namespaceSelector:
            matchLabels:
              kubernetes.io/metadata.name: default
---
# Source: postgresql/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app: release-name-postgresql
    chart: postgresql-15.3.1
    release: release-name
    heritage: Helm
---
# Source: postgresql/templates/sec.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app: release-name-postgresql
    chart: postgresql-15.3.1
    release: release-name
    heritage: Helm
    cluster-name: release-name-postgresql
type: Opaque
data:
  password-superuser: dGVh
  password-rewind: Y29sYQ==
  password-replication: cmVwcGFzc3dk 
  data-user: dXMx
  data-name: ZGIx
  data-password: MTExdw==
---
# Source: postgresql/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-postgresql-cm
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-15.3.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    cluster-name: release-name-postgresql
data:
  pre_init.sh: |-
    cat > /opt/drycc/postgresql/patroni.yml <<__EOF__
    log:
      level: DEBUG
    bootstrap:
      dcs:
        postgresql:
          use_pg_rewind: true
          use_slots: true
          pg_hba:
          - local all all  peer
          - host all tea_mon 127.0.0.1/32  trust
          - host all all 0.0.0.0/0 scram-sha-256
          - host replication ${PATRONI_REPLICATION_USERNAME} 0.0.0.0/0 scram-sha-256
          parameters:
            wal_level: hot_standby
            hot_standby: "on"
            max_connections: 1005
            max_worker_processes: 8
            wal_keep_segments: 8
            max_wal_senders: 10
            max_replication_slots: 10
            max_prepared_transactions: 0
            max_locks_per_transaction: 64
            wal_log_hints: "on"
            track_commit_timestamp: "off"
            archive_mode: "on"
            archive_timeout: 1800s
            archive_command: /bin/true
            # timescaledb.license: 'timescale'
            shared_preload_libraries: 'auto_explain,pg_stat_statements'
      initdb:
        - auth-host: scram-sha-256
        - auth-local: trust
        - encoding: UTF8
        - locale: en_US.UTF-8
        - data-checksums
      post_bootstrap: sh /opt/drycc/postgresql/scripts/post_init.sh
    restapi:
      connect_address: '${PATRONI_KUBERNETES_POD_IP}:8008'
    postgresql:
      connect_address: '${PATRONI_KUBERNETES_POD_IP}:5432'
      authentication:
        superuser:
          username: postgres
          password: '${PATRONI_SUPERUSER_PASSWORD}'
        replication:
          username: standby
          password: '${PATRONI_REPLICATION_PASSWORD}'
        rewind:  # Has no effect on postgres 10 and lower
          username: rewinder
          password: '${PATRONI_REWIND_USERNAME}'
    watchdog:
      mode: off
    __EOF__
    
  post_init.sh: |-
    #!/bin/bash
    set -Eeu
    # Create monitor user
    psql -w -c  "CREATE USER tea_mon WITH ROLE pg_monitor"
    # Create init database & user 
    if [[( -n "$DATABASE_USER") &&  ( -n "$DATABASE_PASSWORD") && ( -n "$DATABASE_NAME")]]; then
      echo "Creating user ${DATABASE_USER}"
      psql -w -c "create user ${DATABASE_USER} WITH LOGIN ENCRYPTED PASSWORD '${DATABASE_PASSWORD}'"
      echo "Creating database ${DATABASE_NAME} "
      psql -w -c "CREATE DATABASE ${DATABASE_NAME} OWNER ${DATABASE_USER} CONNECTION LIMIT 1000"
      psql -w -d ${DATABASE_NAME} -c "create extension postgis ; create extension pg_stat_statements ; create extension pg_buffercache ;"
      psql -w -c  "CHECKPOINT;CHECKPOINT;"
    else
      echo "Skipping user creation"
      echo "Skipping database creation"
    fi
---
# Source: postgresql/templates/role.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app: release-name-postgresql
    chart: postgresql-15.3.1
    release: release-name
    heritage: Helm
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs:
  - create
  - get
  - list
  - patch
  - update
  - watch
  # delete is required only for 'patronictl remove'
  - delete
- apiGroups: [""]
  resources: ["services"]
  verbs:
  - create
- apiGroups: [""]
  resources: ["endpoints"]
  verbs:
  - create
  - get
  - patch
  - update
  # the following three privileges are necessary only when using endpoints
  - list
  - watch
  # delete is required only for for 'patronictl remove'
  - delete
  - deletecollection
- apiGroups: [""]
  resources: ["pods"]
  verbs:
  - get
  - list
  - patch
  - update
  - watch
---
# Source: postgresql/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app: release-name-postgresql
    chart: postgresql-15.3.1
    release: release-name
    heritage: Helm
subjects:
  - kind: ServiceAccount
    name: release-name-postgresql
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: release-name-postgresql
---
# Source: postgresql/templates/svc-config.yaml
# headless service to avoid deletion of patronidemo-config endpoint
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-config
  labels:
    app: release-name-postgresql
    release: release-name
    cluster-name: release-name-postgresql
spec:
  clusterIP: None
---
# Source: postgresql/templates/svc-metrics.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-metrics
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-15.3.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: patroni
    app.kubernetes.io/component: metrics
  annotations:
    prometheus.io/port: '9187'
    prometheus.io/scrape: "true"
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http-metrics
      port: 9187
      targetPort: http-metrics
  selector:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/component: patroni
---
# Source: postgresql/templates/svc-relp.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql-repl
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-15.3.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: patroni
    app: release-name-postgresql
    chart: postgresql-15.3.1
    release: release-name
    heritage: Helm
    cluster-name: release-name-postgresql
    role: replica
spec:
  type: LoadBalancer
  selector:
    app: release-name-postgresql
    cluster-name: release-name-postgresql
    role: replica
  ports:
  - port: 5432
    targetPort: 5432
---
# Source: postgresql/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-15.3.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: patroni
    app: release-name-postgresql
    chart: postgresql-15.3.1
    release: release-name
    heritage: Helm
    cluster-name: release-name-postgresql
    role: master
spec:
  type: LoadBalancer
  ports:
  - name: postgresql
    port: 5432
    targetPort: 5432
    protocol: TCP
---
# Source: postgresql/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: release-name-postgresql
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-15.3.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/component: patroni
    app: release-name-postgresql
    chart: postgresql-15.3.1
    release: release-name
    heritage: Helm
    cluster-name: release-name-postgresql
spec:
  serviceName: release-name-postgresql
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/component: patroni
      app: release-name-postgresql
      chart: postgresql-15.3.1
      release: release-name
      heritage: Helm
      cluster-name: release-name-postgresql
  template:
    metadata:
      name: release-name-postgresql
      labels:
        app.kubernetes.io/name: postgresql
        helm.sh/chart: postgresql-15.3.1
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/component: patroni
        app: release-name-postgresql
        chart: postgresql-15.3.1
        release: release-name
        heritage: Helm
        cluster-name: release-name-postgresql
    spec:
      serviceAccountName: release-name-postgresql
    
      # securityContext:
      #   runAsUser: postgres
      #   fsGroup: postgres
      containers:
      - name: postgresql
        image: "registry.drycc.cc/drycc-addons/postgresql-patroni:15"
        imagePullPolicy: IfNotPresent
        # securityContext: 
        #   runAsUser: postgres
        #   fsGroup: postgres
        env:        
        - name: PATRONI_KUBERNETES_USE_ENDPOINTS
          value: 'true'
        - name: PATRONI_KUBERNETES_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: PATRONI_KUBERNETES_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: PATRONI_KUBERNETES_BYPASS_API_SERVICE
          value: 'true'
        - name: PATRONI_KUBERNETES_LABELS
          value: '{app: release-name-postgresql,release: release-name,cluster-name: release-name-postgresql}'
        - name: PATRONI_SUPERUSER_USERNAME
          value: postgres
        - name: PATRONI_SUPERUSER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-postgresql
              key: password-superuser
        - name: PATRONI_REPLICATION_USERNAME
          value: standby
        - name: PATRONI_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-postgresql
              key: password-replication
        - name: PATRONI_REWIND_USERNAME
          value: rewinder
        - name: PATRONI_REWIND_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-postgresql
              key: password-rewind
        - name: PATRONI_SCOPE
          value: release-name-postgresql
        - name: PATRONI_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: PATRONI_POSTGRESQL_DATA_DIR
          value: "/home/postgres/pgdata/data"
        - name: PATRONI_POSTGRESQL_PGPASS
          value: /tmp/pgpass
        - name: PATRONI_POSTGRESQL_LISTEN
          value: '0.0.0.0:5432'
        - name: PATRONI_RESTAPI_LISTEN
          value: '0.0.0.0:8008'
        
        - name: DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: release-name-postgresql
              key: data-name
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: release-name-postgresql
              key: data-user
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: release-name-postgresql
              key: data-password
        readinessProbe:
          httpGet:
            scheme: HTTP
            path: /readiness
            port: 8008
          initialDelaySeconds: 3
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        livenessProbe:
          failureThreshold: 3                            
          httpGet:       
            path: /liveness
            port: 8008
            scheme: HTTP   
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 5
        lifecycle:
          preStop:
            exec:
              command:
                - /usr/bin/env
                - bash
                - -c
                - |
                  # switch leader pod if the current pod is the leader
                  if curl --fail http://localhost:8008/read-write; then
                    init-stack patronictl switchover --force
                  fi
        ports:
        - containerPort: 8008
          protocol: TCP
        - containerPort: 5432
          protocol: TCP
        volumeMounts:
        - name: storage-volume
          mountPath: "/home/postgres/pgdata"
        - mountPath: "/opt/drycc/postgresql/scripts/"
          name: patroni-config
          # readOnly: true
        resources:
          limits:
            cpu: 100m
            memory: 512Mi
          requests:
            cpu: 100m
            memory: 512Mi
      - name: metrics
        image: "registry.drycc.cc/drycc-addons/postgres-exporter:0"
        imagePullPolicy: "IfNotPresent"
        env:
          - name: DATA_SOURCE_NAME
            value: postgresql://tea_mon:password@127.0.0.1:5432/db1?sslmode=disable       
        ports:
          - name: http-metrics
            containerPort: 9187
        startupProbe:
          initialDelaySeconds: 10
          tcpSocket:
              port: http-metrics
          periodSeconds: 10
          timeoutSeconds: 1
          failureThreshold: 15
          successThreshold: 1
        livenessProbe:
          initialDelaySeconds: 5
          httpGet:
            path: /
            port: http-metrics
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        readinessProbe:
          initialDelaySeconds: 5
          httpGet:
            path: /
            port: http-metrics
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        resources:
            limits:
              cpu: 100m
              memory: 512Mi
            requests:
              cpu: 100m
              memory: 512Mi
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app:  postgresql
                  release: "release-name"
        
      volumes:
      - name: patroni-config
        configMap:
          name: release-name-postgresql-cm
      - name: storage-volume
        emptyDir: {}
---
# Source: postgresql/templates/cronjob.yaml
apiVersion: batch/v1
kind: CronJob
metadata:
  name: release-name-postgresql-backup
  namespace: "default"
  labels:
    app.kubernetes.io/name: postgresql
    helm.sh/chart: postgresql-15.3.1
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    cluster-name: release-name-postgresql

spec:
  schedule: "*/1 * * * *"
  failedJobsHistoryLimit: 1
  successfulJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: OnFailure              
          containers:         
          - name: postgresql-backup
            image: "registry.drycc.cc/drycc-addons/postgresql-patroni:15"
            imagePullPolicy: Always
            #imagePullPolicy: "IfNotPresent"
            command:  
              - /usr/bin/env
              - bash
              - -c
              - |
                echo "sleeping ...."
                sleep 10000
                echo "Successfull"
                init-stack  /opt/drycc/wal-g/bin/wal-g backup-push
                init-stack  /opt/drycc/wal-g/bin/wal-g delete 
            env:              
              - name: USE_WALG
                value: "true"
              - name: BACKUP_SCHEDULE
                value: "eee"
              - name: BACKUP_NUM_TO_RETAIN
                value: "2"
              - name: WALG_BACKUP_THRESHOLD_MEGABYTES
                value: "1024"
              - name: WALE_BACKUP_THRESHOLD_PERCENTAGE
                value: "30"
              - name: PGHOST
                value: release-name-postgresql-repl
              - name: PGPASSWORD
                valueFrom:
                  secretKeyRef:
                    name: release-name-postgresql
                    key: password-replication
              - name: PGUSER
                value: standby
              - name: PGPORT
                value: "5432"
