{{- /*
Copyright Drycc Community.
SPDX-License-Identifier: APACHE-2.0
*/}}

apiVersion: {{ include "common.capabilities.cronjob.apiVersion" . }}
kind: Job
metadata:
  name: {{ include "mysql.cluster.fullname" . }}-init
  namespace: {{ include "common.names.namespace" . | quote }}
  labels: {{- include "common.labels.standard" . | nindent 4 }}
    app.kubernetes.io/component: primary
    {{- if .Values.commonLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.commonLabels "context" $ ) | nindent 4 }}
    {{- end }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}

spec:
  template:
    spec:
      restartPolicy: Never
      subdomain: {{ include "mysql.primary.fullname" . }}
      dnsConfig: 
        searches:
          - {{ include "mysql.primary.fullname" . }}.{{ include "common.names.namespace" . }}.svc.cluster.local
      initContainers:
        - name: init-wait
          image: registry.uucin.com/drycc/python-dev:latest
          imagePullPolicy: {{.Values.imagePullPolicy}}
          args:
          - netcat
          - -v
          - -u
          - mysql://$(MYSQL_HOST)-2:$(MYSQL_PORT_NUMBER)

          env:
            - name: MYSQL_HOST
              value: {{ include "mysql.primary.fullname" . }}
            - name: MYSQL_PORT_NUMBER
              value: {{ .Values.primary.service.ports.mysql | quote }}
                  
      containers:         
        - name: init-cluster
          image: {{ include "cluster.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.primary.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.primary.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          command: 
            - /bin/bash
            - -ec
            - |

              export HOST_0=${MYSQL_HOST}-0
              export HOST_1=${MYSQL_HOST}-1
              export HOST_2=${MYSQL_HOST}-2

              # create mysql cluster  --file
              echo "
              shell.options['dba.restartWaitTimeout']=300;
              dba.createCluster('MXMGR',{disableClone:false});
              dba.getCluster().addInstance('root@${HOST_1}',{recoveryMethod:'clone'});
              dba.getCluster().addInstance('root@${HOST_2}',{recoveryMethod:'clone'});
              dba.getCluster().status();
              " > /tmp/create_cluster.js
              mysqlsh --uri=${MYSQL_ROOT_USER}@${HOST_0}:${MYSQL_PORT_NUMBER} -p${MYSQL_ROOT_PASSWORD} -f /tmp/create_cluster.js
              
              # init sql --sql
              echo "
              GRANT ALL PRIVILEGES ON *.* TO administrator@'%' WITH GRANT OPTION;flush privileges;
              " > /tmp/init.sql
              mysqlsh --uri=${MYSQL_ROOT_USER}@${HOST_0}:${MYSQL_PORT_NUMBER} -p${MYSQL_ROOT_PASSWORD} --sql -f /tmp/init.sql
          env:
            - name: MYSQL_HOST
              value: {{ include "mysql.primary.fullname" . }}
            - name: MYSQL_PORT_NUMBER
              value: {{ .Values.primary.service.ports.mysql | quote }}
            - name: MYSQL_ROOT_USER
              value: "root"
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "mysql.secretName" . }}
                  key: mysql-root-password
